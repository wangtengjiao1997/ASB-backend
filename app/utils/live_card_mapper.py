from typing import List, Dict, Any, Tuple
from datetime import datetime
from app.entities.live_card_entity import LiveCard
import json
from app.utils.logger_service import logger

def compose_nested_structure(ai_generated_data):
    """Compose the AI generated flat structure into the required nested structure.
    
    This function combines the flat elements generated by AI into the final nested structure:
    - key_stakeholders_info + stakeholders_list -> key_stakeholders with nested stakeholders
    - impact_info + impacts_list -> impact_of_event with nested impacts
    
    Args:
        ai_generated_data (dict): The AI generated data with flat structure
        
    Returns:
        dict: The composed data with nested structure
    """
    if not ai_generated_data or "live_card" not in ai_generated_data:
        return ai_generated_data
    live_card = ai_generated_data["live_card"]

    if not live_card or "modules" not in live_card:
        return ai_generated_data
    modules = live_card["modules"]
    if "RelatedInfo" not in modules:
        return ai_generated_data
        
    sidebar_data = modules["RelatedInfo"]
    if "elements" not in sidebar_data:
        return ai_generated_data
        
    elements = sidebar_data["elements"]
    
    # Compose key_stakeholders nested structure
    if "key_stakeholders_info" in elements and "stakeholders_list" in elements:
        stakeholders_info = elements["key_stakeholders_info"]
        stakeholders_list = elements["stakeholders_list"]
        
        # Create nested key_stakeholders structure
        elements["key_stakeholders"] = {
            "module_type": "element",
            "name": "key_stakeholders",
            "props": stakeholders_info.get("props", {}),
            "is_array": False,
            "elements": {
                "stakeholders": {
                    "module_type": "element",
                    "name": "stakeholders",
                    "props": stakeholders_list.get("props", []),
                    "is_array": True
                }
            }
        }
        
        # Remove the flat elements
        del elements["key_stakeholders_info"]
        del elements["stakeholders_list"]
    
    # Compose impact_of_event nested structure
    if "impact_info" in elements and "impacts_list" in elements:
        impact_info = elements["impact_info"]
        impacts_list = elements["impacts_list"]
        
        # Create nested impact_of_event structure
        elements["impact_of_event"] = {
            "module_type": "element",
            "name": "impact_of_event",
            "props": impact_info.get("props", {}),
            "is_array": False,
            "elements": {
                "impacts": {
                    "module_type": "element",
                    "name": "impacts",
                    "props": impacts_list.get("props", []),
                    "is_array": True
                }
            }
        }
        
        # Remove the flat elements
        del elements["impact_info"]
        del elements["impacts_list"]

    return ai_generated_data

def transform_entity_to_ai(live_card: LiveCard) -> Dict[str, Any]:
    """
    将LiveCard和LiveCardItem实体转换为AI使用的Schema Json格式
    
    Args:
        live_card: LiveCard实体
        live_card_items: LiveCardItem实体列表
    
    Returns:
        AI使用的Schema Json格式数据
    """

    # 转换LiveCardItem列表为items格式
    items_data = []

    for item in live_card_items:
        item_data = {
            "name": item.name,
            "description": item.description,
            "image_urls": item.image_urls,
            "reference_urls": item.reference_urls,
            "date_time": item.date_time.isoformat(),
        }
        items_data.append(item_data)
        
    # 处理related_info
    event_sidebar = live_card.related_info or {}
    
    # 提取背景信息，如果数据库中没有则为空字符串
    background_context = event_sidebar.get("background_context", "")
    event_overview = event_sidebar.get("event_overview", [])
    key_stakeholders = event_sidebar.get("key_stakeholders", [])
    impact_of_event = event_sidebar.get("impact_of_event", [])
    
    # 构建最终的AI数据结构
    ai_data = {
        "modules": {
            "event_timeline": {
                "module_type": "container",
                "name": "event_timeline",
                "props": None,
                "elements": {
                    "event_items": {
                        "module_type": "element",
                        "name": "event_items",
                        "props": items_data,
                        "is_array": True
                    }
                }
            },
            "background_context": {
                "module_type": "container",
                "name": "background_context",
                "props": {
                    "generated": True,
                    "content": background_context
                },
                "elements": None
            },
            "event_timeline_overview": {
                "module_type": "container",
                "name": "event_timeline_overview",
                "props": {
                    "overviews": event_overview
                },
                "elements": None
            },
            "key_stakeholders": {
                "module_type": "container",
                "name": "key_stakeholders",
                "props": None,
                "elements": {
                    "stakeholders": {
                        "module_type": "element",
                        "name": "stakeholders",
                        "props": key_stakeholders,
                        "is_array": True
                    }
                }
            },
            "event_timeline_impact": {
                "module_type": "container",
                "name": "event_timeline_impact",
                "props": None,
                "elements": {
                    "impacts": {
                        "module_type": "element",
                        "name": "impacts",
                        "props": impact_of_event,
                        "is_array": True
                    }
                }
            }
        }
    }
    
    return ai_data

def transform_ai_to_entity(ai_data: Dict[str, Any]) -> Tuple[Dict, List[Dict]]:
    """
    将AI生成的Schema Json格式转换为LiveCard和LiveCardItem实体
    
    Args:
        ai_data: AI生成的Schema Json格式数据
    
    Returns:
        (LiveCard实体, LiveCardItem实体列表)的元组
    """
    try:
        live_card = ai_data.get("live_card", {})
        if not live_card:
            raise ValueError("缺少live_card数据")
        
        modules = live_card.get("modules", {})
        if not modules:
            raise ValueError("缺少modules数据")
        
        # 解析event_timeline数据
        event_timeline_module = modules.get("event_timeline", {})
        event_timeline_elements = event_timeline_module.get("elements", {})
        event_timeline_items = event_timeline_elements.get("event_items", {}).get("props", [])
        # 构建related_info
        background_context_module = modules.get("background_context", {})
        background_context = background_context_module.get("props",{})
        background_context_content = background_context.get("content", "")
        
        event_overview_module = modules.get("event_timeline_overview", {})
        event_overview = event_overview_module.get("props",{})
        event_overview_points = event_overview.get("overviews", [])

        key_stakeholders_module = modules.get("key_stakeholders", {})
        key_stakeholders_elements = key_stakeholders_module.get("elements", {})
        key_stakeholders_item = key_stakeholders_elements.get("stakeholders", {}).get("props", [])

        impact_of_event_module = modules.get("event_timeline_impact", {})
        impact_of_event_elements = impact_of_event_module.get("elements", {})
        impact_of_event_item = impact_of_event_elements.get("impacts", {}).get("props", [])


        related_info = {
            "background_context" : background_context_content,
            "event_overview" : event_overview_points,
            "key_stakeholders" : key_stakeholders_item,
            "impact_of_event" : impact_of_event_item
        }
        live_card = {
            "related_info" : related_info,
        }
        
        # 创建LiveCardItem实体列表
        live_card_items = []
        for item_data in event_timeline_items:
            live_card_item = {
                "name":item_data.get("name", ""),
                "description":item_data.get("description", ""),
                "image_urls":item_data.get("image_urls", []),
                "reference_urls":item_data.get("reference_urls", []),
                "date_time":item_data.get("date_time", ""),
            }
            live_card_items.append(live_card_item)
    except Exception as e:
        logger.warning(f"转换AI生成的Schema Json格式失败: {str(e)}")
        return {}, []
    
    return live_card, live_card_items
    
def metadata_increment(metadata: Dict[str, Any], ai_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    将AI生成的Schema Json格式数据合并到metadata中
    
    合并规则：
    1. event_items.props: 列表追加
    2. event_timeline_overview.props.overviews: 列表追加
    3. 其他字段: 直接覆盖
    """
    if not metadata:
        return ai_data

    # 获取原有数据
    modules = metadata.get("modules", {})
    new_modules = ai_data.get("live_card", {}).get("modules", {})

    # 处理event_items.props（追加）
    event_items = modules.get("event_timeline", {}).get("elements", {}).get("event_items", {})
    new_event_items = new_modules.get("event_timeline", {}).get("elements", {}).get("event_items", {})
    if "props" in event_items and "props" in new_event_items:
        event_items["props"].extend(new_event_items["props"])

    # 处理overviews（追加）
    overview = modules.get("event_timeline_overview", {}).get("props", {})
    new_overview = new_modules.get("event_timeline_overview", {}).get("props", {})
    if "overviews" in overview and "overviews" in new_overview:
        overview["overviews"].extend(new_overview["overviews"])

    # 其他字段直接覆盖
    metadata["modules"].update(new_modules)
    
    return metadata

def get_update_increment(ai_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    获取更新后的live_card信息
    """

    new_modules = ai_data.get("modules", {})

    # 处理event_items.props（追加）

    new_event_items = new_modules.get("event_timeline", {}).get("elements", {}).get("event_items", {})

    new_overview = new_modules.get("event_timeline_overview", {}).get("props", {})
    
    return {
        "event_items" : new_event_items,
        "event_timeline_overview" : new_overview,
    }